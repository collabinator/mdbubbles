name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --with dev --no-root
        shell: bash

      - name: Install project
        run: poetry install --no-interaction --with dev
        shell: bash

      - name: Run tests
        run: poetry run pytest tests/ -v
        shell: bash

  build:
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: windows
          - os: macos-latest
            platform: macos

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Get version
        id: get_version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "tag_name=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Update version in pyproject.toml
        run: |
          poetry version ${{ steps.get_version.outputs.version }}
        shell: bash

      - name: Install all dependencies (including dev)
        run: poetry install --no-interaction --with dev
        shell: bash

      - name: Build wheel and sdist
        run: |
          poetry build
        shell: bash

      - name: Build standalone executable
        run: |
          poetry run pyinstaller --onefile --name mdbub-${{ matrix.platform }} src/mdbub/cli.py
        shell: bash

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: builds-${{ matrix.platform }}
          path: |
            dist/*
            dist/mdbub-${{ matrix.platform }}*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "tag_name=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.tag_name }}
          release_name: Release ${{ steps.get_version.outputs.tag_name }}
          draft: false
          prerelease: false
          body: |
            ## Changes in this Release

            <!-- Add your release notes here -->

      - name: Upload Release Assets
        run: |
          for file in builds-*/*; do
            if [ -f "$file" ]; then
              echo "Uploading $file"
              curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                   -H "Content-Type: application/octet-stream" \
                   --data-binary @"$file" \
                   "${{ steps.create_release.outputs.upload_url }}?name=$(basename $file)"
            fi
          done

  publish-pypi:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi

      - name: Update version
        run: poetry version ${{ steps.get_version.outputs.version }}
        shell: bash

      - name: Install PyInstaller
        run: poetry install --with dev

      - name: Build package
        run: poetry build
        shell: bash

      - name: Publish to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        run: poetry publish
        shell: bash

  update-homebrew:
    needs: [release, publish-pypi]
    runs-on: ubuntu-latest
    if: vars.HOMEBREW_TAP_ENABLED == 'true'  # Only run if tap is enabled
    steps:
      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "tag_name=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout mdbubbles
        uses: actions/checkout@v4
        with:
          path: mdbubbles

      - name: Checkout homebrew-tap
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/homebrew-tap
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          path: tap-repo

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"


      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest

      - name: Install poetry-plugin-export
        run: poetry self add poetry-plugin-export
        working-directory: ${{ github.workspace }}/mdbubbles

      - name: Export requirements from poetry.lock
        run: poetry export --without-hashes -f requirements.txt -o requirements.txt
        working-directory: ${{ github.workspace }}/mdbubbles

      - name: Generate Homebrew resource blocks
        run: |
          pip install requests
          python scripts/make_resources.py --file requirements.txt --output ../tap-repo/Formula/mdbub_resources.rb
        working-directory: ${{ github.workspace }}/mdbubbles

      - name: Commit and push Homebrew resource updates
        run: |
          cd tap-repo
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add Formula/mdbub_resources.rb
          if ! git diff --cached --quiet; then
            git commit -m "Update Python dependencies for mdbub formula"
            git push
          else
            echo "No changes to commit."
          fi

      - name: Update Homebrew formula
        uses: mislav/bump-homebrew-formula-action@v2
        with:
          formula-name: mdbub
          homebrew-tap: ${{ github.repository_owner }}/homebrew-tap
          base-branch: main
          download-url: https://github.com/${{ github.repository }}/archive/refs/tags/${{ steps.get_version.outputs.tag_name }}.tar.gz
        env:
          COMMITTER_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}

  homebrew-test:
    needs: update-homebrew
    runs-on: macos-latest
    steps:
      - name: Install from Homebrew Tap
        run: |
          brew tap ${{ github.repository_owner }}/homebrew-tap
          brew install mdbub
          mdbub --version


  update-chocolatey:
    needs: [release, publish-pypi]
    runs-on: windows-latest
    if: vars.CHOCOLATEY_PUBLISH_ENABLED == 'true'  # Only run if publishing to Chocolatey is enabled
    steps:
      - name: Find built nupkg
        id: find_nupkg
        run: |
          $pkg = Get-ChildItem -Path . -Recurse -Filter "mdbub.*.nupkg" | Select-Object -First 1
          if ($null -eq $pkg) { Write-Error "No .nupkg file found!"; exit 1 }
          "$env:GITHUB_OUTPUT" | Out-File -Append -Encoding utf8
          echo "path=$($pkg.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
        shell: pwsh

      - name: Push to Chocolatey
        run: choco push ${{ steps.find_nupkg.outputs.path }} --api-key ${{ secrets.CHOCOLATEY_REPO_TOKEN }} --source https://push.chocolatey.org/
        shell: pwsh
